=== tests/cases/compiler/tupleLength.ts ===
// var t0: [];
var t1: [number];
>t1 : Symbol(t1, Decl(tupleLength.ts, 1, 3), Decl(tupleLength.ts, 10, 3))

var t2: [number, number];
>t2 : Symbol(t2, Decl(tupleLength.ts, 2, 3), Decl(tupleLength.ts, 11, 3))

var arr: number[];
>arr : Symbol(arr, Decl(tupleLength.ts, 3, 3))

// var len0: 0 = t0.length;
var len1: 1 = t1.length;
>len1 : Symbol(len1, Decl(tupleLength.ts, 6, 3))
>t1.length : Symbol(length)
>t1 : Symbol(t1, Decl(tupleLength.ts, 1, 3), Decl(tupleLength.ts, 10, 3))
>length : Symbol(length)

var len2: 2 = t2.length;
>len2 : Symbol(len2, Decl(tupleLength.ts, 7, 3))
>t2.length : Symbol(length)
>t2 : Symbol(t2, Decl(tupleLength.ts, 2, 3), Decl(tupleLength.ts, 11, 3))
>length : Symbol(length)

var lena: number = arr.length;
>lena : Symbol(lena, Decl(tupleLength.ts, 8, 3))
>arr.length : Symbol(Array.length, Decl(lib.d.ts, --, --))
>arr : Symbol(arr, Decl(tupleLength.ts, 3, 3))
>length : Symbol(Array.length, Decl(lib.d.ts, --, --))

var t1 = t2; // error
>t1 : Symbol(t1, Decl(tupleLength.ts, 1, 3), Decl(tupleLength.ts, 10, 3))
>t2 : Symbol(t2, Decl(tupleLength.ts, 2, 3), Decl(tupleLength.ts, 11, 3))

var t2 = t1; // error
>t2 : Symbol(t2, Decl(tupleLength.ts, 2, 3), Decl(tupleLength.ts, 11, 3))
>t1 : Symbol(t1, Decl(tupleLength.ts, 1, 3), Decl(tupleLength.ts, 10, 3))

type A<T extends any[]> = T['length'];
>A : Symbol(A, Decl(tupleLength.ts, 11, 12))
>T : Symbol(T, Decl(tupleLength.ts, 13, 7))
>T : Symbol(T, Decl(tupleLength.ts, 13, 7))

var b: A<[boolean]>;
>b : Symbol(b, Decl(tupleLength.ts, 14, 3))
>A : Symbol(A, Decl(tupleLength.ts, 11, 12))

var c: 1 = b;
>c : Symbol(c, Decl(tupleLength.ts, 15, 3))
>b : Symbol(b, Decl(tupleLength.ts, 14, 3))

